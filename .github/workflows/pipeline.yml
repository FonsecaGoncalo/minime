name: CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_VERSION: 1.5.5

jobs:
  terraform:
    name: Terraform Pipeline
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_notion_api_key: ${{ secrets.NOTION_API_KEY }}
      TF_VAR_notion_db_id: ${{ secrets.NOTION_DB_ID }}
      TF_VAR_pinecone_api_key: ${{ secrets.PINECONE_API_KEY }}
      TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
      TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
      TF_VAR_google_service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
      TF_VAR_event_bus_name: ${{ secrets.EVENT_BUS_NAME }}
      TF_VAR_ses_from_email: ${{ secrets.SES_FROM_EMAIL }}
      TF_VAR_ses_to_email: ${{ secrets.SES_TO_EMAIL }}
      TF_VAR_newrelic_license_key: ${{ secrets.NEWRELIC_LICENSE_KEY }}

    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry and Export Plugin
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry self add poetry-plugin-export

      - name: Build Python project
        working-directory: ./backend
        run: ./build.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform init (with S3 backend)
        run: |
          terraform init \
            -input=false \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

#      - name: Terraform plan
#        id: plan
#        run: terraform plan -out=tfplan -input=false

      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve tfplan

      - name: Read Terraform output
        id: tf
        run: |
          ## grab only the first line (the real bucket name)
               bucket_name=$(terraform output -raw bucket_name 2>/dev/null)
               cd_dist_id=$(terraform output -raw cd_dist_id 2>/dev/null)


          ## now append clean KEY=VALUE lines to GITHUB_ENV
               echo "BUCKET_NAME=${bucket_name}" >> $GITHUB_ENV
               echo "CF_DIST_ID=${cd_dist_id}" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false --passWithNoTests

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Sync to S3
        working-directory: frontend
        run: |
          echo "Syncing to bucket: $BUCKET_NAME"
          aws s3 sync ./build/ s3://$BUCKET_NAME/ --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id $CF_DIST_ID --paths "/*"

